function run_cmd(cmd, args, projectPath, callBack, exitCallBack) {
    var spawn = require('child_process').spawn;
    var child = spawn(cmd, args, { cwd: projectPath });
    var resp = "";

    child.stdout.on('data', function (buffer) { resp += buffer.toString(); });
    child.stdout.on('end', function () { callBack(resp); });
    child.on('exit', function (code, signal) { exitCallBack(code); });
}

function mkdirSync(path) {
    try {
        var fs = require('fs');
        fs.mkdirSync(path);
    } catch (e) {
        if (e.code != 'EEXIST') throw e;
    }
}

function mkdirpSync(dirpath) {
    var path = require('path');
    var parts = dirpath.split(path.sep);
    for (var i = 1; i <= parts.length; i++) {
        mkdirSync(path.join.apply(null, parts.slice(0, i)));
    }
}

module.exports = function ($logger, $projectData, hookArgs) {
    return new Promise(function (resolve, reject) {

        $logger.info('Setting the Environment Config for Nativescript');

        var path = require('path');
        var fs = require('fs');

        var projectPath = path.normalize($projectData.projectDir + '\\..\\');

        //Get the path from where the generated environment config file will be
        var envConfigPath = path.normalize(projectPath + 'dist/dev/app/frameworks/core/utils/env.config.js');

        $logger.trace('envConfigPath: ' + envConfigPath);

        var hasFile = false;
        try {
            var configTempDir = path.dirname(envConfigPath);
            mkdirpSync(configTempDir);
            stats = fs.lstatSync(envConfigPath);
            hasFile = stats.isFile();
        } catch (e) {
            $logger.trace(e);
        }
        $logger.trace('hasFile: ' + hasFile);

        if (!hasFile) {
            var gulpCommandArguments = ['./node_modules/gulp/bin/gulp.js', 'build.dev'];

            //Add the --config-env parameter to the gulp build.dev if needed
            var configEnv = process.env.APP_CONFIG_ENV; //Once it's not yet possible to receive an custom argument like `tns emulate android --config-env dev`, i get this from an Environment Variable (APP_CONFIG_ENV)
            if (configEnv != undefined) {
                configEnv = configEnv.trim();
                gulpCommandArguments.push('--config-env', configEnv.trim()); //If has the config_env, then add the arguments to pass it to the gulp build.dev command
            }

            $logger.info('Generating the Environment Config');

            $logger.trace('Running command: ' + gulpCommandArguments.join(' '));

            //Run the gulp build.dev to generate the environment config file 'env.config.js'
            run_cmd('node', gulpCommandArguments, projectPath, function (text) { $logger.trace(text); }, function (code) {
                try {
                    var fs = require('fs');
                    fs.readFile(envConfigPath, function (err, data) {
                        $logger.info('Replacing the generated env.config of nativescript for the one generated by gulp build.dev');
                        fs.writeFile('app/app/frameworks/core/utils/env.config.js', data, function (err) {
                            if (err) {
                                $logger.error(err);
                                reject(err);
                                return;
                            }
                            $logger.info('Environment Config setted!');
                            resolve();
                        });
                    });


                } catch (err) {
                    reject(err);
                    throw err;
                }
            });
        } else {
            var fs = require('fs');
            //write env.config to the app directory
            fs.readFile(envConfigPath, function (err, data) {
                $logger.info('Replacing the generated env.config of nativescript for the one generated by gulp build.dev');
                fs.writeFile('app/app/frameworks/core/utils/env.config.js', data, function (err) {
                    if (err) {
                        $logger.error(err);
                        reject(err);
                        throw err;
                    }

                    $logger.info('Environment Config setted!');
                    resolve();
                });
            });
        }
    });
}
